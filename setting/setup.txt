# ルートのフォルダ omotest

# Pymysqlをインストール
conda install -c anaconda pymysql

# 開発フォルダを作製
mkdir omotest
cd omotest

# dockerファイルを作成
cat <<EOF > Dockerfile
FROM python:3-alpine
ENV PYTHONUNBUFFERED 1
RUN mkdir /code
WORKDIR /code
ADD requirements.txt /code/
RUN pip install -r requirements.txt
ADD . /code/
EOF

# riquirement.txt
cat <<EOF > requirements.txt
Django==2.1.2
#PyMySQL==0.9.2
EOF

# データベース初期化フォルダを作成
mkdir sql

# データベース初期化sql文
cat <<EOF > sql/001_setup_application_database.sql
CREATE DATABASE IF NOT EXISTS izanami CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
CREATE USER IF NOT EXISTS 'izanami'@'%' IDENTIFIED BY 'P@ssw0rd_izanami';
GRANT ALL PRIVILEGES ON izanami.* TO 'izanami'@'%';
EOF

# docker-compose.yml
cat <<EOF > docker-compose.yml
version: '3'

services:

  # https://hub.docker.com/r/mysql/mysql-server/
  db:
    image: mysql/mysql-server:5.7
    environment:
      - MYSQL_ROOT_PASSWORD=P@ssw0rd
      - MYSQL_ROOT_HOST=%
    volumes:
      - ./db-datadir:/var/lib/mysql
      - ./sql:/docker-entrypoint-initdb.d
    ports:
      - "3306:3306"

  web:
    build: .
    command: sh -c "sleep 3; ./manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/code
    ports:
      - "8000:8000"
    depends_on:
      - db
EOF

# DBの初期化
docker-compose up -d db

# うまくいかなかったら
docker-compose up --build -d

# Djangoプロジェクトを作成
sudo docker-compose run web django-admin.py startproject izanagi .

# settings.py の編集
# webコンテナ内のDjangoプロジェクトからdbコンテナ内のMySQLに接続するために、
# settings.pyのDATABASESを書き換え
vi mysite/settings.py

---	
import pymysql
pymysql.install_as_MySQLdb()
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'izanami',
        'USER': 'izanami',
        'PASSWORD': 'P@ssw0rd_izanami',
        'HOST': 'db',
        'PORT': 3306,
        'OPTIONS': {
            'charset': 'utf8mb4',
        },
    }
}
---
# DBマイグレーション
docker-compose run web ./manage.py makemigrations
docker-compose run web ./manage.py migrate

# 管理者ユーザの作成
docker-compose run web ./manage.py createsuperuser --username admin --email admin@localhost

# 実行
docker-compose run web python manage.py runserver

# ブラウザで動作確認
http://localhost:8000/admin
# うまく起動しなかったら、サービスの再起動を行う。
docker-compose down
docker-compose up -d


--------------
アプリ作成
--------------
# 作成したプロジェクトに移動
## cd mySite

# アプリ作成
docker-compose run web ./manage.py startapp myapp


# マイグレーション実施
docker-compose run web ./manage.py migrate


# models.pyを編集
from django.db import models
class Person(models.Model):
    last_name = models.CharField(max_length=20)
    first_name = models.CharField(max_length=20)


# mySite/settings.pyのINSTALLED_APPSに、1行追加
INSTALLED_APPS = [
    'myapp.apps.MyappConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

# Djangoにmodelの変更を知らせる
docker-compose run web ./manage.py makemigrations myapp
docker-compose run web ./manage.py migrate

# データベースに値を設定
docker-compose run web ./manage.py shell

from myapp.models import Person
>>>p = Person(last_name="Python", first_name="Taro")
>>>p.last_name
Python
>>>p.first_name
Taro

--------------
View作成
--------------
# myapp/views.pyを以下の内容に編集
from django.http import HttpResponse
 
def index(request):
    return HttpResponse("Hello, world.")

# views.pyとURLを紐付ける為に、views.pyと同じディレクトリにurls.pyを新規作成
from django.conf.urls import url
from . import views
 
urlpatterns = [
    url(r'^$', views.index, name='index'),
]

# mySite/urls.pyも編集する
from django.conf.urls import include, url
from django.contrib import admin
 
urlpatterns = [
    url(r'^myapp/', include('myapp.urls')),
    url(r'^admin/', admin.site.urls),
]

# ルートからサービスを立ち上げる。
docker-compose up -d

# サーバーを起動する
docker-compose run web python manage.py runserver







